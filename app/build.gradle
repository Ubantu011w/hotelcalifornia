/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'

    // code quality support
    id 'checkstyle'
    id "com.github.spotbugs" version "5.0.0-beta.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'mysql:mysql-connector-java:8.0.15'
    // https://mvnrepository.com/artifact/net.sf.jasperreports/jasperreports
    implementation ('net.sf.jasperreports:jasperreports:6.18.1') {
      exclude group: 'com.lowagie', module: 'itext'
    }
    implementation 'org.springframework:spring-core:5.3.15'
    implementation 'com.lowagie:itext:2.1.7'
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

application {
    // Define the main class for the application.
    mainClass = 'javaproject.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    // make sure we run the code quality stuff first
    // we need the generated reports when testing
    dependsOn checkstyleMain
    dependsOn spotbugsMain

    // verbose output so we get some info in the console when we run tests
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

spotbugsMain {
    ignoreFailures = true   // failures are handled via automatic testing
    showStackTraces = false
    reports {
        html {
            enabled = false
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            //stylesheet = 'fancy-hist.xsl'
        }
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugs.xml")
        }
    }
}

// we dont wan't to run the spotbugs on the unit tests
spotbugsTest {
    ignoreFailures = false
    showStackTraces = false
    enabled = false
}

checkstyle {
    // assign the latest checkstyle version explicitly
    // default version is very old, likes 5.9
    toolVersion = '8.38'
    // checkstyle.xml copy from:
    // https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.6/src/main/resources/google_checks.xml
    // the version should be as same as plugin version
    configFile = rootProject.file('config/checkstyle/google_checks.xml')    // you can of course change this to something else
    sourceSets = [] // remove from default build only explicit calls ig.e. gradlew checkStyleMain
}

